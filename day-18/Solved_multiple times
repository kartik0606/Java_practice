//5. Sort 0s, 1s, and 2s (Dutch National Flag)
//    * Given an array consisting only of 0s, 1s, and 2s, sort it so that all 0s come first, then all 1s, then all 2s.
//    * Classic problem (uses 3 pointers, but often grouped under two-pointer pattern).

//import java.util.Arrays;
//
//public class Main {
//    public static void main(String[] args) {
//        int[] arr = {1, 0, 2, 0, 1, 0, 2, 0, 2, 1};
//        Dutch(arr);
//        System.out.println(Arrays.toString(arr));
//        for (int i = 0; i < arr.length; i++) {
//            System.out.print(arr[i] + "  ");
//
//        }
//
//    }
//
//    static void Dutch(int[] arr) {
//        int left = 0;
//        int right = arr.length - 1;
//        int mid = 0;
//        while (mid <= right) {
//            if (arr[mid] == 0) {
//                swap(arr, left, mid);
//                left++;
//                mid++;
//            } else if (arr[mid] == 1) {
//                mid++;
//
//            } else {
//                swap(arr, mid, right);
//                right--;
//            }
//        }
//    }
//
//    static void swap(int[] arr, int i, int j) {
//        int temp = arr[i];
//        arr[i] = arr[j];
//        arr[j] = temp;
//    }
//}

//6. Merge Sorted Array
//    * Given two sorted integer arrays nums1 and nums2 (with nums1 having enough extra space), merge nums2 into nums1.
//        * Result: one sorted array containing all elements.
//        * Efficient approach: start from the end with two pointers.

//

import java.util.Arrays;

//import java.util.Arrays;
//
//public class Main {
//    public static void main(String[] args) {
//         int[] nums1 = {1,2,3,0,0,0};
//         int[] nums2 = {9,5,6};
//         int m = 3;
//         int n = 3;
//        Arrays.sort(nums2);
//         Mergesorted(nums1,nums2,m,n);
//        for (int i = 0; i <m+n ; i++) {
//            System.out.print(nums1[i] + "  " );
//
//        }
//
//    }
//     static void Mergesorted(int[]nums1,int[]nums2,int m , int n){
//         int i = m-1;
//         int j = n-1;
//         int k = m + n-1;
//
//         while ( i>=0 && j>=0 ){
//             if (nums1[i]>=nums2[j]){
//                  nums1[k] = nums1[i];
//                  i--;
//
//             }else {
//                 nums1[k] = nums2[j];
//                 j--;
//
//
//             }
//             k--;
//         }
//          while (j>=0){
//              nums1[k] = nums2[j];
//              j--;
//              k--;
//          }
//     }
//}
//public class Main {
//    public static void main(String[] args) {
//        int[] nums1 = {1, 2, 3, 0, 0, 0};
//        int[] nums2 = {11,33,8};
//        int m = 3;
//        int n = 3;
//        Arrays.sort(nums2);
//        Mergesorted(nums1, nums2, m, n);
//        for (int i = 0; i < m + n; i++) {
//            System.out.print(nums1[i] + "  ");
//
//        }
//
//    }
//
//
//    static void Mergesorted(int[] nums1, int[] nums2, int m, int n) {
//        int i = m - 1;
//        int j = n - 1;
//        int k = m + n - 1;
//
//        while (i >= 0 && j >= 0) {
//            if (nums1[i] > nums2[j]) {
//                nums1[k] = nums1[i];
//                i--;
//            } else {
//                nums1[k] = nums2[j];
//                j--;
//            }
//            k--;
//
//        }
//        while (j >= 0) {
//            nums1[k] = nums2[j];
//            j--;
//            k--;
//
//        }
//    }
//}
//public class Main {
//    public static void main(String[] args) {
//         int[]nums1 = {1,2,3,0,0,0};
//         int[]nums2 = {9,8,4};
//         int m = 3;
//         int n = 3;
//        Arrays.sort(nums2);
//         Mergesorted(nums1,nums2,m,n);
//        for (int i = 0; i < m+n ; i++) {
//            System.out.print(nums1[i] + "  " );
//
//        }
//
//    }
//
//    static void Mergesorted(int[] nums1, int[] nums2, int m, int n) {
//        int i = m - 1;
//        int j = n - 1;
//        int k = m + n - 1;
//        while (i >= 0 && j >= 0) {
//            if (nums1[i] > nums2[j]) {
//                nums1[k] = nums1[i];
//                i--;
//
//            } else {
//                nums1[k] = nums2[j];
//                j--;
//            }
//            k--;
//
//        }
//         while (j>=0){
//             nums1[k] = nums2[j];
//             j--;
//             k--;
//         }
//    }
//}
//7. Intersection of Two Sorted Arrays
//    * Given two sorted arrays a[] and b[], return a sorted list of the elements common to both (no duplicates).
//        * Advance two pointers through the arrays in O(n + m) time.
//Hint:
//Use two pointers, one for each array (i for a[], j for b[]).
//Compare a[i] and b[j]:
//If equal → add to result (skip duplicates) and move both pointers.
//If a[i] < b[j] → move i++.
//If a[i] > b[j] → move j++.
//Continue until either pointer reaches the end.
//This ensures O(n + m) time without extra space for duplicates.

//public class Main {
//    public static void main(String[] args) {
//        int[] arr1 = {1,55, 2, 3, 4, 5,8,66};
//        int[] arr2 = {1, 55,2, 5, 7, 9,8,66};
//        int m = arr1.length;
//        int n = arr2.length;
//        Arrays.sort(arr1);
//        Arrays.sort(arr2);
//        Intersection(arr1, arr2, m, n);
//
//
//
//    }
//
//    static void Intersection(int[] arr1, int[] arr2, int m, int n) {
//
//        int i = 0;
//        int j = 0;
//        int lastCommon = Integer.MIN_VALUE;
//        while (i < m && j < n) {
//            if (arr1[i] == arr2[j]) {
//                if (arr1[i] != lastCommon) { // only print if not duplicate
//                    lastCommon = arr1[i];
//                    System.out.print(arr1[i] + " ");
//
//                }
//                i++;
//                j++;
//            } else if (arr1[i] < arr2[j]) {
//                i++;
//            } else {
//                j++;
//            }
//
//        }
//
//
//    }
//}
// public class Main {
//    public static void main(String[] args) {
//        int[] nums1 = {1, 2, 6, 9};
//        int[] nums2 = {1, 2, 8, 5};
//        int m = nums1.length;
//        int n = nums2.length;
//        Arrays.sort(nums1);
//        Arrays.sort(nums2);
//        Intersection(nums1, nums2, m, n);
//
//    }
//
//    static void Intersection(int[] nums1, int[] nums2, int m, int n) {
//        int i = 0;
//        int j = 0;
//        int last = Integer.MIN_VALUE;
//        while (i < m && j < n) {
//            if (nums1[i] == nums2[j]) {
//                if (nums1[i] != last) {
//                    last = nums1[i];
//                    System.out.println(nums1[i]);
//
//                }
//                i++;
//                j++;
//
//
//            } else if (nums1[i] < nums2[j]) {
//                i++;
//
//
//            } else {
//                j++;
//            }
//        }
//    }
//}

//public class Main {
//    public static void main(String[] args) {
//         int[]nums1= {1,7,3,0,0,0};
//         int[]nums2 = { 9,8,6};
//         int m = 3;
//         int n = 3;
//    Arrays.sort(nums1, 0, m);
//         Arrays.sort(nums2);
//         Mergesorted(nums1,nums2,m,n);
//        for (int i = 0; i <m+n ; i++) {
//            System.out.print(nums1[i] + "  " );
//
//        }
//
//
//    }
//
//    static void Mergesorted(int[] nums1, int[] nums2, int m, int n) {
//        int i = m - 1;
//        int j = n - 1;
//        int k = m + n - 1;
//        while (i >= 0 && j >= 0) {
//             if (nums1[i]  > nums2[j]){
//                 nums1[k] = nums1[i];
//                 i--;
//             }else {
//                 nums1[k]=nums2[j];
//                 j--;
//             }
//             k--;
//        }
//         while (j>=0){
//             nums1[k] = nums2[j];
//             j--;
//             k--;
//         }
//    }
//}
//
//public class Main {
//    public static void main(String[] args) {
//        int[]nums1 = { 1,12,3,0,0,0,};
//        int[]nums2 = {7,9,8};
//        int m = 3;
//        int n = 3;
//        Arrays.sort(nums1,0,m);
//        Arrays.sort(nums2);
//        Mergesorted(nums1,nums2,n,m);
//        for (int i = 0; i <m+n ; i++) {
//            System.out.print(nums1[i] + "  ");
//
//        }
//
//    }
//    static void Mergesorted(int[]nums1,int[]nums2,int n, int m){
//        int i = m-1;
//        int j = n-1;
//        int k = m+n-1;
//        while (i>=0 && j>=0){
//            if (nums1[i]>nums2[j]){
//                nums1[k] = nums1[i];
//                i--;
//            }else {
//                nums1[k]=nums2[j];
//                j--;
//            }
//            k--;
//        }
//        while (j>=0){
//            nums1[k] = nums2[j];
//            i--;
//            k--;
//        }
//    }
//}

public class Main {
    public static void main(String[] args) {
        int[]nums1 = { 1,2,3,4,5};
        int[]nums2 = {1,2,4,6,8};
        int n = nums2.length;
        int m = nums1.length;
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        Intersection(nums1,nums2,n,m);


    }

    static void Intersection(int[] nums1, int[] nums2, int n, int m) {
        int i = 0;
        int j = 0;
        int common = Integer.MIN_VALUE;
        while (i < m && j < n) {
            if (nums1[i] == nums2[j]) {
                if (common != nums1[i]) {
                   common = nums1[i];
                    System.out.println(nums1[i]);

                }
                i++;
                j++;


            } else if (nums1[i]>nums2[j]) {
                 i++;

            }else {
                j++;
            }


        }

        }


    }
