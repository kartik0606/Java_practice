import java.util.Arrays;

//import java.util.Arrays;
//
//public class Main {
//    public static void main(String[] args) {
//       int[]arr = {1,0,1,0,1,0,0,1,0};
//       issorted(arr);
//        System.out.println(Arrays.toString(arr));
//
//    }
//
//    static void issorted(int[] arr) {
//        int n = arr.length;
//        int left = 0;
//        int right = arr.length - 1;
//        while (left < right) {
//            if (arr[left] == 1 && arr[right] == 0) {
//                swap(arr, left, right);
//            }
//            if (arr[left] == 0) {
//                left++;
//
//            }
//            if (arr[right] == 1) {
//                right--;
//
//
//            }
//        }
//
//    }
//
//    static void swap(int[] arr, int i, int j) {
//        int temp = arr[i];
//        arr[i] = arr[j];
//        arr[j] = temp;
//    }
//}
//public class Main {
//    public static void main(String[] args) {
//        int[] arr = {12, 11, 10, 7, 18, 17, 22};
//        isevenoddsorted(arr);
//        System.out.println(Arrays.toString(arr));
//
//    }
//
//    static void isevenoddsorted(int[] arr) {
////        int n = arr.length;
//        int left = 0;
//        int right = arr.length - 1;
//        while (left < right) {
//            if (arr[left] % 2 != 0 && arr[right] % 2 == 0) {
//                swap(arr, left, right);
//            }
//            if (arr[left] % 2 == 0) {
//                left++;
//
//            }
//            if (arr[right] % 2 != 0) {
//                right--;
//            }
//
//
//        }
//    }
//
//    static void swap(int[] arr, int i, int j) {
//        int temp = arr[i];
//        arr[i] = arr[j];
//        arr[j] = temp;
//    }
//}
// public class Main {
//    public static void main(String[] args) {
//         int[]arr = { 1,2,3,4,5,6};
//     int[]result  =Twosum(arr);
//        System.out.println(result[0] + " " + result[1]);
//        System.out.println(arr[result[0]] + " " +arr[result[1]]);
//    }
//     static int[] Twosum(int[]arr){
//        int left = 0;
//        int  right = arr.length-1;
//        int target = 9;
//        while (left<right){
//            int sum = arr[left] + arr[right];
//            if (sum==target){
//                return new int[]{left,right};
//
//            }
//             if (sum<target){
//                 left++;
//             }
//             else {
//                 right--;
//             }
//        }
//         return new int[]{-1,-1};
//     }
//}
//2. Remove Duplicates from Sorted Array
//    * Given a sorted array nums, remove duplicates in-place so that each unique element appears only once.
//    * Return the count of unique elements.
//        * After removal, the first part of the array contains the unique values.
//public class Main {
//    public static void main(String[] args) {
//        int[]arr = {0,0,1,1,1,2,2,3,3,4};
//        int count = duplicate(arr);
//        System.out.println("no of counts are " + count);
//        for (int i = 0; i < count ; i++) {
//            System.out.println(arr[i] + "  " );
//
//        }
//
//
//    }
//    static int duplicate(int[]arr){
//        int n = arr.length;
//        int left = 0;
//        int right = 1;//why 1 no idea
//        while (right<arr.length){ //why  right < n no idea
//            if (arr[left] == arr[right]){
//                right++; //why right++ no idea
//            }
//            else {
//                left++;
//                arr[left] = arr[right];//why this no idea
//                right++;
//
//            }
//
//        }
//         return left + 1; // why this no idea
//
//
//    }
//}


//public class Main {
//    public static void main(String[] args) {
//        int[]arr = {0,0,1,1,1,2,2,3,3,4};
//        int count = Isduplicate(arr);
//        System.out.println(" No of counts are = " + count);
//
//        for (int i = 0; i <count ; i++) {
//            System.out.println(" No of elements are -> " +  arr[i]);
//
//        }
//
//    }
//     static int Isduplicate(int[]arr){
//        int left = 0;
//        int right = 1;
//        while (right<arr.length){
//             if (arr[left] == arr[right]){
//                 right++;
//             }else {
//                 left++;
//                 arr[left]=arr[right];//internally how this remove elements
//                 right++;
//
//             }
//
//
//        }
//         return left+1;//why left + 1
//
//     }
//}
//3. Remove Element (In-Place)
//    * Given an array arr[] and a value ele, remove all occurrences of ele in-place.
//    * Return the new length of the array.
//        * The order of remaining elements may change.

public class Main {
    public static void main(String[] args) {
        int[] arr = {3, 2, 2, 3, 4, 2, 5};  
        int newLength = element(arr);       

        System.out.println("New length: " + newLength);
        System.out.print("Modified array: ");
        for (int i = 0; i < newLength; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    static int element(int[] arr) {
        int left = 0;
        int right = arr.length - 1;
        int ele = 2;

        while (left <= right) {   
            if (arr[left] == ele) {
                arr[left] = arr[right];
                right--;
            } else {
                left++;
            }
        }
        return left;
    }
}
